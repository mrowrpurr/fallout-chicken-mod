/*
    Main script which powers: The Cheat Chicken *bukaw!*
*/

export variable cheatchicken_config;
export variable cheatchicken_data;

#define INI_FILE      "CheatChicken.ini"
#define DATA_SAVE_KEY "cheatchicken_data"

#include "define.h"
#include "sfall/sfall.h"
#include "sfall/lib.arrays.h"
#include "FormattedDisplay.h"

#include "CheatChicken/Messages.h"

variable config;
variable data;

procedure load_config begin
    config = {};
    fix_array(config);
    cheatchicken_config = config;

    variable section_names = get_ini_sections(INI_FILE);
    variable section_name;
    foreach section_name in section_names begin
        variable section = get_ini_section(INI_FILE, section_name);
        fix_array(section);
        config[section_name] = section;
    end

    // Consider always using atoi instead?
    config.Egg.pid = atoi(config.Egg.pid);
    config.Egg.script_id = atoi(config.Egg.script_id);
end

procedure load_data begin
    data = load_array(DATA_SAVE_KEY);
    if not data then begin
        data = {};
        fix_array(data);
        save_array(DATA_SAVE_KEY, data);
    end
    cheatchicken_data = data;
end

procedure give_egg_to_player begin
    set_proto_data(config.Egg.pid, 0x4, 23101);
    data.egg_obj = create_object_sid(config.Egg.pid, 0, 0, config.Egg.script_id);
    add_obj_to_inven(dude_obj, data.egg_obj);
end

procedure hook_description begin
    variable obj = get_sfall_arg;
    if obj == data.egg_obj then
        set_sfall_return(get_string_pointer(get_msg(MSG_EGG_DESCRIPTION)));
    else if obj == data.chicken_obj then
        set_sfall_return(get_string_pointer(get_msg(MSG_CHICKEN_DESCRIPTION)));
end

procedure hooks_register begin
    register_hook_proc(HOOK_DESCRIPTIONOBJ, hook_description);
end

procedure start begin
    if game_loaded then begin
        call load_config;
        call load_data;
        call hooks_register;
        call give_egg_to_player;
    end
end


